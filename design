1. No block grids. Click & drag to extend stuff, snapping, arrow keys for precision, etc.
2. Before calculating collision with ships, check if anything is even arround them. Do this by having a grid of 'blocks' arround the entire world that loosely resembles a single block grid. Each ship has its own grid size, which is a box arround the ship. Each time the ship moves to a new location, it removes its old cubes(sets to false) and puts new ones in where it is. These grids would be locked to a block grid, meaning they move like something would move in a terminal game. If you
viewed it in a debug mode, it'd look like Minecraft with moving blocks--or rather, 'skipping' blocks.
    These grids are not necisarily an accurate representation of the ship or its collisions. They're a check to see if any physics calculation needs to be done at all. Problems, however, will arrise when ships are moving at ludicrous speed and their grids phase through eachother. Possible solutions are:
        a. Grid expansion porportional to the speed of the object. An example would be a little ship, represented by a 6x6 grid is still. Its grid is currently 6x6. Then, it moves to 100M/S. Its grid is now 8x8, because, without the expansion, it would 'skip' two blocks. Should be pretty light on the CPU, just calculate it in intervals, for example, recalculate every 10 M/S. 
    Addionally, problems will arise in the fact that, on a slower computer, you'd be going at 1.00 sim speed just fine, then you drop an item and start lagging. This is likely unsolvable and is just an artifact of the system. The load would still be only slightly higher than if you just always did normal physics calculations. 
    Finally, this system seems similar to that of KSP's. A lot could probably be learned from that.
3. Debug code is to be as self-contained a possible. This way, it will need the least ammount of attention. 
